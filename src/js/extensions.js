/**
 * Entitas Generated Extensions for example
 *
 * do not edit this file
 */
define("extensions", ["require", "exports", "components"], function (require, exports, components) {
  "use strict";
  var Bag = entitas.utils.Bag;
  var Pool = entitas.Pool;
  var Entity = entitas.Entity;
  var Matcher = entitas.Matcher;
  var SingleEntityException = entitas.SingleEntityException;
  var BoundsComponent = components.BoundsComponent;
  var BulletComponent = components.BulletComponent;
  var ColorAnimationComponent = components.ColorAnimationComponent;
  var EnemyComponent = components.EnemyComponent;
  var ExpiresComponent = components.ExpiresComponent;
  var FiringComponent = components.FiringComponent;
  var HealthComponent = components.HealthComponent;
  var ParallaxStarComponent = components.ParallaxStarComponent;
  var PlayerComponent = components.PlayerComponent;
  var PositionComponent = components.PositionComponent;
  var ScaleAnimationComponent = components.ScaleAnimationComponent;
  var SoundEffectComponent = components.SoundEffectComponent;
  var SpriteComponent = components.SpriteComponent;
  var VelocityComponent = components.VelocityComponent;
  var ScoreComponent = components.ScoreComponent;
  var DestroyComponent = components.DestroyComponent;
  var MouseComponent = components.MouseComponent;
  var ScaleComponent = components.ScaleComponent;
  var ResourceComponent = components.ResourceComponent;
  var LayerComponent = components.LayerComponent;
  var CoreComponentIds = components.CoreComponentIds;
  /** @type {entitas.utils.Bag} */
  Entity._boundsComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._boundsComponentPool.add(new BoundsComponent());
    }
  })();
  Entity.clearBoundsComponentPool = function() {
    Entity._boundsComponentPool.clear();
  };
  /** @type {{components.BoundsComponent} */
  Object.defineProperty(Entity.prototype, 'bounds', {
    get: function() {
      return this.getComponent(CoreComponentIds.Bounds);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasBounds', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Bounds);
    }
  });
  /**
   * @param {number} radius
   * @returns {entitas.Entity}
   */
  Entity.prototype.addBounds = function(radius) {
    var component = Entity._boundsComponentPool.size() > 0 ? Entity._boundsComponentPool.removeLast() : new BoundsComponent();
    component.radius = radius;
    this.addComponent(CoreComponentIds.Bounds, component);
    return this;
  };
  /**
   * @param {number} radius
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceBounds = function(radius) {
    var previousComponent = this.hasBounds ? this.bounds : null;
    var component = Entity._boundsComponentPool.size() > 0 ? Entity._boundsComponentPool.removeLast() : new BoundsComponent();
    component.radius = radius;
    this.replaceComponent(CoreComponentIds.Bounds, component);
    if (previousComponent != null) {
      Entity._boundsComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeBounds = function() {
    var component = this.bounds;
    this.removeComponent(CoreComponentIds.Bounds);
    Entity._boundsComponentPool.add(component);
    return this;
  };
  /** @type {components.BulletComponent} */
  Entity.bulletComponent = new BulletComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isBullet', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Bullet);
    },
    set: function(value) {
      if (value !== this.isBullet) {
        if (value) {
          this.addComponent(CoreComponentIds.Bullet, Entity.bulletComponent);
        } else {
          this.removeComponent(CoreComponentIds.Bullet);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setBullet = function(value) {
    this.isBullet = value;
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._colorAnimationComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._colorAnimationComponentPool.add(new ColorAnimationComponent());
    }
  })();
  Entity.clearColorAnimationComponentPool = function() {
    Entity._colorAnimationComponentPool.clear();
  };
  /** @type {{components.ColorAnimationComponent} */
  Object.defineProperty(Entity.prototype, 'colorAnimation', {
    get: function() {
      return this.getComponent(CoreComponentIds.ColorAnimation);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasColorAnimation', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ColorAnimation);
    }
  });
  /**
   * @param {number} redMin
   * @param {number} redMax
   * @param {number} redSpeed
   * @param {number} greenMin
   * @param {number} greenMax
   * @param {number} greenSpeed
   * @param {number} blueMin
   * @param {number} blueMax
   * @param {number} blueSpeed
   * @param {number} alphaMin
   * @param {number} alphaMax
   * @param {number} alphaSpeed
   * @param {boolean} redAnimate
   * @param {boolean} greenAnimate
   * @param {boolean} blueAnimate
   * @param {boolean} alphaAnimate
   * @param {boolean} repeat
   * @returns {entitas.Entity}
   */
  Entity.prototype.addColorAnimation = function(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) {
    var component = Entity._colorAnimationComponentPool.size() > 0 ? Entity._colorAnimationComponentPool.removeLast() : new ColorAnimationComponent();
    component.redMin = redMin;
    component.redMax = redMax;
    component.redSpeed = redSpeed;
    component.greenMin = greenMin;
    component.greenMax = greenMax;
    component.greenSpeed = greenSpeed;
    component.blueMin = blueMin;
    component.blueMax = blueMax;
    component.blueSpeed = blueSpeed;
    component.alphaMin = alphaMin;
    component.alphaMax = alphaMax;
    component.alphaSpeed = alphaSpeed;
    component.redAnimate = redAnimate;
    component.greenAnimate = greenAnimate;
    component.blueAnimate = blueAnimate;
    component.alphaAnimate = alphaAnimate;
    component.repeat = repeat;
    this.addComponent(CoreComponentIds.ColorAnimation, component);
    return this;
  };
  /**
   * @param {number} redMin
   * @param {number} redMax
   * @param {number} redSpeed
   * @param {number} greenMin
   * @param {number} greenMax
   * @param {number} greenSpeed
   * @param {number} blueMin
   * @param {number} blueMax
   * @param {number} blueSpeed
   * @param {number} alphaMin
   * @param {number} alphaMax
   * @param {number} alphaSpeed
   * @param {boolean} redAnimate
   * @param {boolean} greenAnimate
   * @param {boolean} blueAnimate
   * @param {boolean} alphaAnimate
   * @param {boolean} repeat
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceColorAnimation = function(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) {
    var previousComponent = this.hasColorAnimation ? this.colorAnimation : null;
    var component = Entity._colorAnimationComponentPool.size() > 0 ? Entity._colorAnimationComponentPool.removeLast() : new ColorAnimationComponent();
    component.redMin = redMin;
    component.redMax = redMax;
    component.redSpeed = redSpeed;
    component.greenMin = greenMin;
    component.greenMax = greenMax;
    component.greenSpeed = greenSpeed;
    component.blueMin = blueMin;
    component.blueMax = blueMax;
    component.blueSpeed = blueSpeed;
    component.alphaMin = alphaMin;
    component.alphaMax = alphaMax;
    component.alphaSpeed = alphaSpeed;
    component.redAnimate = redAnimate;
    component.greenAnimate = greenAnimate;
    component.blueAnimate = blueAnimate;
    component.alphaAnimate = alphaAnimate;
    component.repeat = repeat;
    this.replaceComponent(CoreComponentIds.ColorAnimation, component);
    if (previousComponent != null) {
      Entity._colorAnimationComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeColorAnimation = function() {
    var component = this.colorAnimation;
    this.removeComponent(CoreComponentIds.ColorAnimation);
    Entity._colorAnimationComponentPool.add(component);
    return this;
  };
  /** @type {components.EnemyComponent} */
  Entity.enemyComponent = new EnemyComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isEnemy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Enemy);
    },
    set: function(value) {
      if (value !== this.isEnemy) {
        if (value) {
          this.addComponent(CoreComponentIds.Enemy, Entity.enemyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Enemy);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setEnemy = function(value) {
    this.isEnemy = value;
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._expiresComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._expiresComponentPool.add(new ExpiresComponent());
    }
  })();
  Entity.clearExpiresComponentPool = function() {
    Entity._expiresComponentPool.clear();
  };
  /** @type {{components.ExpiresComponent} */
  Object.defineProperty(Entity.prototype, 'expires', {
    get: function() {
      return this.getComponent(CoreComponentIds.Expires);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasExpires', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Expires);
    }
  });
  /**
   * @param {number} delay
   * @returns {entitas.Entity}
   */
  Entity.prototype.addExpires = function(delay) {
    var component = Entity._expiresComponentPool.size() > 0 ? Entity._expiresComponentPool.removeLast() : new ExpiresComponent();
    component.delay = delay;
    this.addComponent(CoreComponentIds.Expires, component);
    return this;
  };
  /**
   * @param {number} delay
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceExpires = function(delay) {
    var previousComponent = this.hasExpires ? this.expires : null;
    var component = Entity._expiresComponentPool.size() > 0 ? Entity._expiresComponentPool.removeLast() : new ExpiresComponent();
    component.delay = delay;
    this.replaceComponent(CoreComponentIds.Expires, component);
    if (previousComponent != null) {
      Entity._expiresComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeExpires = function() {
    var component = this.expires;
    this.removeComponent(CoreComponentIds.Expires);
    Entity._expiresComponentPool.add(component);
    return this;
  };
  /** @type {components.FiringComponent} */
  Entity.firingComponent = new FiringComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isFiring', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Firing);
    },
    set: function(value) {
      if (value !== this.isFiring) {
        if (value) {
          this.addComponent(CoreComponentIds.Firing, Entity.firingComponent);
        } else {
          this.removeComponent(CoreComponentIds.Firing);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setFiring = function(value) {
    this.isFiring = value;
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._healthComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._healthComponentPool.add(new HealthComponent());
    }
  })();
  Entity.clearHealthComponentPool = function() {
    Entity._healthComponentPool.clear();
  };
  /** @type {{components.HealthComponent} */
  Object.defineProperty(Entity.prototype, 'health', {
    get: function() {
      return this.getComponent(CoreComponentIds.Health);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasHealth', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Health);
    }
  });
  /**
   * @param {number} health
   * @param {number} maximumHealth
   * @returns {entitas.Entity}
   */
  Entity.prototype.addHealth = function(health, maximumHealth) {
    var component = Entity._healthComponentPool.size() > 0 ? Entity._healthComponentPool.removeLast() : new HealthComponent();
    component.health = health;
    component.maximumHealth = maximumHealth;
    this.addComponent(CoreComponentIds.Health, component);
    return this;
  };
  /**
   * @param {number} health
   * @param {number} maximumHealth
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceHealth = function(health, maximumHealth) {
    var previousComponent = this.hasHealth ? this.health : null;
    var component = Entity._healthComponentPool.size() > 0 ? Entity._healthComponentPool.removeLast() : new HealthComponent();
    component.health = health;
    component.maximumHealth = maximumHealth;
    this.replaceComponent(CoreComponentIds.Health, component);
    if (previousComponent != null) {
      Entity._healthComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeHealth = function() {
    var component = this.health;
    this.removeComponent(CoreComponentIds.Health);
    Entity._healthComponentPool.add(component);
    return this;
  };
  /** @type {components.ParallaxStarComponent} */
  Entity.parallaxStarComponent = new ParallaxStarComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isParallaxStar', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ParallaxStar);
    },
    set: function(value) {
      if (value !== this.isParallaxStar) {
        if (value) {
          this.addComponent(CoreComponentIds.ParallaxStar, Entity.parallaxStarComponent);
        } else {
          this.removeComponent(CoreComponentIds.ParallaxStar);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setParallaxStar = function(value) {
    this.isParallaxStar = value;
    return this;
  };
  /** @type {components.PlayerComponent} */
  Entity.playerComponent = new PlayerComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isPlayer', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Player);
    },
    set: function(value) {
      if (value !== this.isPlayer) {
        if (value) {
          this.addComponent(CoreComponentIds.Player, Entity.playerComponent);
        } else {
          this.removeComponent(CoreComponentIds.Player);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setPlayer = function(value) {
    this.isPlayer = value;
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._positionComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._positionComponentPool.add(new PositionComponent());
    }
  })();
  Entity.clearPositionComponentPool = function() {
    Entity._positionComponentPool.clear();
  };
  /** @type {{components.PositionComponent} */
  Object.defineProperty(Entity.prototype, 'position', {
    get: function() {
      return this.getComponent(CoreComponentIds.Position);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasPosition', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Position);
    }
  });
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.addPosition = function(x, y) {
    var component = Entity._positionComponentPool.size() > 0 ? Entity._positionComponentPool.removeLast() : new PositionComponent();
    component.x = x;
    component.y = y;
    this.addComponent(CoreComponentIds.Position, component);
    return this;
  };
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.replacePosition = function(x, y) {
    var previousComponent = this.hasPosition ? this.position : null;
    var component = Entity._positionComponentPool.size() > 0 ? Entity._positionComponentPool.removeLast() : new PositionComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Position, component);
    if (previousComponent != null) {
      Entity._positionComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removePosition = function() {
    var component = this.position;
    this.removeComponent(CoreComponentIds.Position);
    Entity._positionComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._scaleAnimationComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._scaleAnimationComponentPool.add(new ScaleAnimationComponent());
    }
  })();
  Entity.clearScaleAnimationComponentPool = function() {
    Entity._scaleAnimationComponentPool.clear();
  };
  /** @type {{components.ScaleAnimationComponent} */
  Object.defineProperty(Entity.prototype, 'scaleAnimation', {
    get: function() {
      return this.getComponent(CoreComponentIds.ScaleAnimation);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScaleAnimation', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ScaleAnimation);
    }
  });
  /**
   * @param {number} min
   * @param {number} max
   * @param {number} speed
   * @param {boolean} repeat
   * @param {boolean} active
   * @returns {entitas.Entity}
   */
  Entity.prototype.addScaleAnimation = function(min, max, speed, repeat, active) {
    var component = Entity._scaleAnimationComponentPool.size() > 0 ? Entity._scaleAnimationComponentPool.removeLast() : new ScaleAnimationComponent();
    component.min = min;
    component.max = max;
    component.speed = speed;
    component.repeat = repeat;
    component.active = active;
    this.addComponent(CoreComponentIds.ScaleAnimation, component);
    return this;
  };
  /**
   * @param {number} min
   * @param {number} max
   * @param {number} speed
   * @param {boolean} repeat
   * @param {boolean} active
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceScaleAnimation = function(min, max, speed, repeat, active) {
    var previousComponent = this.hasScaleAnimation ? this.scaleAnimation : null;
    var component = Entity._scaleAnimationComponentPool.size() > 0 ? Entity._scaleAnimationComponentPool.removeLast() : new ScaleAnimationComponent();
    component.min = min;
    component.max = max;
    component.speed = speed;
    component.repeat = repeat;
    component.active = active;
    this.replaceComponent(CoreComponentIds.ScaleAnimation, component);
    if (previousComponent != null) {
      Entity._scaleAnimationComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScaleAnimation = function() {
    var component = this.scaleAnimation;
    this.removeComponent(CoreComponentIds.ScaleAnimation);
    Entity._scaleAnimationComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._soundEffectComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._soundEffectComponentPool.add(new SoundEffectComponent());
    }
  })();
  Entity.clearSoundEffectComponentPool = function() {
    Entity._soundEffectComponentPool.clear();
  };
  /** @type {{components.SoundEffectComponent} */
  Object.defineProperty(Entity.prototype, 'soundEffect', {
    get: function() {
      return this.getComponent(CoreComponentIds.SoundEffect);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasSoundEffect', {
    get: function() {
      return this.hasComponent(CoreComponentIds.SoundEffect);
    }
  });
  /**
   * @param {number} effect
   * @returns {entitas.Entity}
   */
  Entity.prototype.addSoundEffect = function(effect) {
    var component = Entity._soundEffectComponentPool.size() > 0 ? Entity._soundEffectComponentPool.removeLast() : new SoundEffectComponent();
    component.effect = effect;
    this.addComponent(CoreComponentIds.SoundEffect, component);
    return this;
  };
  /**
   * @param {number} effect
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceSoundEffect = function(effect) {
    var previousComponent = this.hasSoundEffect ? this.soundEffect : null;
    var component = Entity._soundEffectComponentPool.size() > 0 ? Entity._soundEffectComponentPool.removeLast() : new SoundEffectComponent();
    component.effect = effect;
    this.replaceComponent(CoreComponentIds.SoundEffect, component);
    if (previousComponent != null) {
      Entity._soundEffectComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeSoundEffect = function() {
    var component = this.soundEffect;
    this.removeComponent(CoreComponentIds.SoundEffect);
    Entity._soundEffectComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._spriteComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._spriteComponentPool.add(new SpriteComponent());
    }
  })();
  Entity.clearSpriteComponentPool = function() {
    Entity._spriteComponentPool.clear();
  };
  /** @type {{components.SpriteComponent} */
  Object.defineProperty(Entity.prototype, 'sprite', {
    get: function() {
      return this.getComponent(CoreComponentIds.Sprite);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasSprite', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Sprite);
    }
  });
  /**
   * @param {number} layer
   * @param {Object} object
   * @returns {entitas.Entity}
   */
  Entity.prototype.addSprite = function(layer, object) {
    var component = Entity._spriteComponentPool.size() > 0 ? Entity._spriteComponentPool.removeLast() : new SpriteComponent();
    component.layer = layer;
    component.object = object;
    this.addComponent(CoreComponentIds.Sprite, component);
    return this;
  };
  /**
   * @param {number} layer
   * @param {Object} object
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceSprite = function(layer, object) {
    var previousComponent = this.hasSprite ? this.sprite : null;
    var component = Entity._spriteComponentPool.size() > 0 ? Entity._spriteComponentPool.removeLast() : new SpriteComponent();
    component.layer = layer;
    component.object = object;
    this.replaceComponent(CoreComponentIds.Sprite, component);
    if (previousComponent != null) {
      Entity._spriteComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeSprite = function() {
    var component = this.sprite;
    this.removeComponent(CoreComponentIds.Sprite);
    Entity._spriteComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._velocityComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._velocityComponentPool.add(new VelocityComponent());
    }
  })();
  Entity.clearVelocityComponentPool = function() {
    Entity._velocityComponentPool.clear();
  };
  /** @type {{components.VelocityComponent} */
  Object.defineProperty(Entity.prototype, 'velocity', {
    get: function() {
      return this.getComponent(CoreComponentIds.Velocity);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasVelocity', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Velocity);
    }
  });
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.addVelocity = function(x, y) {
    var component = Entity._velocityComponentPool.size() > 0 ? Entity._velocityComponentPool.removeLast() : new VelocityComponent();
    component.x = x;
    component.y = y;
    this.addComponent(CoreComponentIds.Velocity, component);
    return this;
  };
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceVelocity = function(x, y) {
    var previousComponent = this.hasVelocity ? this.velocity : null;
    var component = Entity._velocityComponentPool.size() > 0 ? Entity._velocityComponentPool.removeLast() : new VelocityComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Velocity, component);
    if (previousComponent != null) {
      Entity._velocityComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeVelocity = function() {
    var component = this.velocity;
    this.removeComponent(CoreComponentIds.Velocity);
    Entity._velocityComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._scoreComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._scoreComponentPool.add(new ScoreComponent());
    }
  })();
  Entity.clearScoreComponentPool = function() {
    Entity._scoreComponentPool.clear();
  };
  /** @type {{components.ScoreComponent} */
  Object.defineProperty(Entity.prototype, 'score', {
    get: function() {
      return this.getComponent(CoreComponentIds.Score);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScore', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Score);
    }
  });
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.addScore = function(value) {
    var component = Entity._scoreComponentPool.size() > 0 ? Entity._scoreComponentPool.removeLast() : new ScoreComponent();
    component.value = value;
    this.addComponent(CoreComponentIds.Score, component);
    return this;
  };
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceScore = function(value) {
    var previousComponent = this.hasScore ? this.score : null;
    var component = Entity._scoreComponentPool.size() > 0 ? Entity._scoreComponentPool.removeLast() : new ScoreComponent();
    component.value = value;
    this.replaceComponent(CoreComponentIds.Score, component);
    if (previousComponent != null) {
      Entity._scoreComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScore = function() {
    var component = this.score;
    this.removeComponent(CoreComponentIds.Score);
    Entity._scoreComponentPool.add(component);
    return this;
  };
  /** @type {components.DestroyComponent} */
  Entity.destroyComponent = new DestroyComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isDestroy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Destroy);
    },
    set: function(value) {
      if (value !== this.isDestroy) {
        if (value) {
          this.addComponent(CoreComponentIds.Destroy, Entity.destroyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Destroy);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setDestroy = function(value) {
    this.isDestroy = value;
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._mouseComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._mouseComponentPool.add(new MouseComponent());
    }
  })();
  Entity.clearMouseComponentPool = function() {
    Entity._mouseComponentPool.clear();
  };
  /** @type {{components.MouseComponent} */
  Object.defineProperty(Entity.prototype, 'mouse', {
    get: function() {
      return this.getComponent(CoreComponentIds.Mouse);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasMouse', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Mouse);
    }
  });
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.addMouse = function(x, y) {
    var component = Entity._mouseComponentPool.size() > 0 ? Entity._mouseComponentPool.removeLast() : new MouseComponent();
    component.x = x;
    component.y = y;
    this.addComponent(CoreComponentIds.Mouse, component);
    return this;
  };
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceMouse = function(x, y) {
    var previousComponent = this.hasMouse ? this.mouse : null;
    var component = Entity._mouseComponentPool.size() > 0 ? Entity._mouseComponentPool.removeLast() : new MouseComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Mouse, component);
    if (previousComponent != null) {
      Entity._mouseComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeMouse = function() {
    var component = this.mouse;
    this.removeComponent(CoreComponentIds.Mouse);
    Entity._mouseComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._scaleComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._scaleComponentPool.add(new ScaleComponent());
    }
  })();
  Entity.clearScaleComponentPool = function() {
    Entity._scaleComponentPool.clear();
  };
  /** @type {{components.ScaleComponent} */
  Object.defineProperty(Entity.prototype, 'scale', {
    get: function() {
      return this.getComponent(CoreComponentIds.Scale);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScale', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Scale);
    }
  });
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.addScale = function(x, y) {
    var component = Entity._scaleComponentPool.size() > 0 ? Entity._scaleComponentPool.removeLast() : new ScaleComponent();
    component.x = x;
    component.y = y;
    this.addComponent(CoreComponentIds.Scale, component);
    return this;
  };
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceScale = function(x, y) {
    var previousComponent = this.hasScale ? this.scale : null;
    var component = Entity._scaleComponentPool.size() > 0 ? Entity._scaleComponentPool.removeLast() : new ScaleComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Scale, component);
    if (previousComponent != null) {
      Entity._scaleComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScale = function() {
    var component = this.scale;
    this.removeComponent(CoreComponentIds.Scale);
    Entity._scaleComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._resourceComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._resourceComponentPool.add(new ResourceComponent());
    }
  })();
  Entity.clearResourceComponentPool = function() {
    Entity._resourceComponentPool.clear();
  };
  /** @type {{components.ResourceComponent} */
  Object.defineProperty(Entity.prototype, 'resource', {
    get: function() {
      return this.getComponent(CoreComponentIds.Resource);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasResource', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Resource);
    }
  });
  /**
   * @param {string} name
   * @returns {entitas.Entity}
   */
  Entity.prototype.addResource = function(name) {
    var component = Entity._resourceComponentPool.size() > 0 ? Entity._resourceComponentPool.removeLast() : new ResourceComponent();
    component.name = name;
    this.addComponent(CoreComponentIds.Resource, component);
    return this;
  };
  /**
   * @param {string} name
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceResource = function(name) {
    var previousComponent = this.hasResource ? this.resource : null;
    var component = Entity._resourceComponentPool.size() > 0 ? Entity._resourceComponentPool.removeLast() : new ResourceComponent();
    component.name = name;
    this.replaceComponent(CoreComponentIds.Resource, component);
    if (previousComponent != null) {
      Entity._resourceComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeResource = function() {
    var component = this.resource;
    this.removeComponent(CoreComponentIds.Resource);
    Entity._resourceComponentPool.add(component);
    return this;
  };
  /** @type {entitas.utils.Bag} */
  Entity._layerComponentPool = new Bag();
  (function() {
    for (var i=0; i<128; i++) {
      Entity._layerComponentPool.add(new LayerComponent());
    }
  })();
  Entity.clearLayerComponentPool = function() {
    Entity._layerComponentPool.clear();
  };
  /** @type {{components.LayerComponent} */
  Object.defineProperty(Entity.prototype, 'layer', {
    get: function() {
      return this.getComponent(CoreComponentIds.Layer);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasLayer', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Layer);
    }
  });
  /**
   * @param {number} ordinal
   * @returns {entitas.Entity}
   */
  Entity.prototype.addLayer = function(ordinal) {
    var component = Entity._layerComponentPool.size() > 0 ? Entity._layerComponentPool.removeLast() : new LayerComponent();
    component.ordinal = ordinal;
    this.addComponent(CoreComponentIds.Layer, component);
    return this;
  };
  /**
   * @param {number} ordinal
   * @returns {entitas.Entity}
   */
  Entity.prototype.replaceLayer = function(ordinal) {
    var previousComponent = this.hasLayer ? this.layer : null;
    var component = Entity._layerComponentPool.size() > 0 ? Entity._layerComponentPool.removeLast() : new LayerComponent();
    component.ordinal = ordinal;
    this.replaceComponent(CoreComponentIds.Layer, component);
    if (previousComponent != null) {
      Entity._layerComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeLayer = function() {
    var component = this.layer;
    this.removeComponent(CoreComponentIds.Layer);
    Entity._layerComponentPool.add(component);
    return this;
  };
  /** @type {entitas.Matcher} */
  Matcher._matcherBounds=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Bounds', {
    get: function() {
      if (Matcher._matcherBounds == null) {
        Matcher._matcherBounds = Matcher.allOf(CoreComponentIds.Bounds);
      }
      
      return Matcher._matcherBounds;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherBullet=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Bullet', {
    get: function() {
      if (Matcher._matcherBullet == null) {
        Matcher._matcherBullet = Matcher.allOf(CoreComponentIds.Bullet);
      }
      
      return Matcher._matcherBullet;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherColorAnimation=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'ColorAnimation', {
    get: function() {
      if (Matcher._matcherColorAnimation == null) {
        Matcher._matcherColorAnimation = Matcher.allOf(CoreComponentIds.ColorAnimation);
      }
      
      return Matcher._matcherColorAnimation;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherEnemy=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Enemy', {
    get: function() {
      if (Matcher._matcherEnemy == null) {
        Matcher._matcherEnemy = Matcher.allOf(CoreComponentIds.Enemy);
      }
      
      return Matcher._matcherEnemy;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherExpires=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Expires', {
    get: function() {
      if (Matcher._matcherExpires == null) {
        Matcher._matcherExpires = Matcher.allOf(CoreComponentIds.Expires);
      }
      
      return Matcher._matcherExpires;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherFiring=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Firing', {
    get: function() {
      if (Matcher._matcherFiring == null) {
        Matcher._matcherFiring = Matcher.allOf(CoreComponentIds.Firing);
      }
      
      return Matcher._matcherFiring;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherHealth=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Health', {
    get: function() {
      if (Matcher._matcherHealth == null) {
        Matcher._matcherHealth = Matcher.allOf(CoreComponentIds.Health);
      }
      
      return Matcher._matcherHealth;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherParallaxStar=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'ParallaxStar', {
    get: function() {
      if (Matcher._matcherParallaxStar == null) {
        Matcher._matcherParallaxStar = Matcher.allOf(CoreComponentIds.ParallaxStar);
      }
      
      return Matcher._matcherParallaxStar;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherPlayer=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Player', {
    get: function() {
      if (Matcher._matcherPlayer == null) {
        Matcher._matcherPlayer = Matcher.allOf(CoreComponentIds.Player);
      }
      
      return Matcher._matcherPlayer;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherPosition=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Position', {
    get: function() {
      if (Matcher._matcherPosition == null) {
        Matcher._matcherPosition = Matcher.allOf(CoreComponentIds.Position);
      }
      
      return Matcher._matcherPosition;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherScaleAnimation=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'ScaleAnimation', {
    get: function() {
      if (Matcher._matcherScaleAnimation == null) {
        Matcher._matcherScaleAnimation = Matcher.allOf(CoreComponentIds.ScaleAnimation);
      }
      
      return Matcher._matcherScaleAnimation;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherSoundEffect=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'SoundEffect', {
    get: function() {
      if (Matcher._matcherSoundEffect == null) {
        Matcher._matcherSoundEffect = Matcher.allOf(CoreComponentIds.SoundEffect);
      }
      
      return Matcher._matcherSoundEffect;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherSprite=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Sprite', {
    get: function() {
      if (Matcher._matcherSprite == null) {
        Matcher._matcherSprite = Matcher.allOf(CoreComponentIds.Sprite);
      }
      
      return Matcher._matcherSprite;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherVelocity=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Velocity', {
    get: function() {
      if (Matcher._matcherVelocity == null) {
        Matcher._matcherVelocity = Matcher.allOf(CoreComponentIds.Velocity);
      }
      
      return Matcher._matcherVelocity;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherScore=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Score', {
    get: function() {
      if (Matcher._matcherScore == null) {
        Matcher._matcherScore = Matcher.allOf(CoreComponentIds.Score);
      }
      
      return Matcher._matcherScore;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherDestroy=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Destroy', {
    get: function() {
      if (Matcher._matcherDestroy == null) {
        Matcher._matcherDestroy = Matcher.allOf(CoreComponentIds.Destroy);
      }
      
      return Matcher._matcherDestroy;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherMouse=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Mouse', {
    get: function() {
      if (Matcher._matcherMouse == null) {
        Matcher._matcherMouse = Matcher.allOf(CoreComponentIds.Mouse);
      }
      
      return Matcher._matcherMouse;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherScale=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Scale', {
    get: function() {
      if (Matcher._matcherScale == null) {
        Matcher._matcherScale = Matcher.allOf(CoreComponentIds.Scale);
      }
      
      return Matcher._matcherScale;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherResource=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Resource', {
    get: function() {
      if (Matcher._matcherResource == null) {
        Matcher._matcherResource = Matcher.allOf(CoreComponentIds.Resource);
      }
      
      return Matcher._matcherResource;
    }
  });
  /** @type {entitas.Matcher} */
  Matcher._matcherLayer=null;
  
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, 'Layer', {
    get: function() {
      if (Matcher._matcherLayer == null) {
        Matcher._matcherLayer = Matcher.allOf(CoreComponentIds.Layer);
      }
      
      return Matcher._matcherLayer;
    }
  });
  /** @type {entitas.Entity} */
  Object.defineProperty(Pool.prototype, 'scoreEntity', {
    get: function() {
      return this.getGroup(Matcher.Score).getSingleEntity();
    }
  });
  /** @type {components.ScoreComponent} */
  Object.defineProperty(Pool.prototype, 'score', {
    get: function() {
      return this.scoreEntity.score;
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'hasScore', {
    get: function() {
      return this.scoreEntity != undefined;
    }
  });
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.setScore = function(value) {
    if (this.hasScore) {
      throw new SingleEntityException(Matcher.Score);
    }
    var entity = this.createEntity('Score');
    entity.addScore(value);
    return entity;
  };
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.replaceScore = function(value) {
    var entity = this.scoreEntity;
    if (entity == null) {
      entity = this.setScore(value);
    } else {
      entity.replaceScore(value);
    }
    return entity;
  };
  /**
   * @returns {entitas.Entity}
   */
  Pool.prototype.removeScore = function() {
    this.destroyEntity(this.scoreEntity);
  };
  /** @type {entitas.Entity} */
  Object.defineProperty(Pool.prototype, 'mouseEntity', {
    get: function() {
      return this.getGroup(Matcher.Mouse).getSingleEntity();
    }
  });
  /** @type {components.MouseComponent} */
  Object.defineProperty(Pool.prototype, 'mouse', {
    get: function() {
      return this.mouseEntity.mouse;
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'hasMouse', {
    get: function() {
      return this.mouseEntity != undefined;
    }
  });
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Pool.prototype.setMouse = function(x, y) {
    if (this.hasMouse) {
      throw new SingleEntityException(Matcher.Mouse);
    }
    var entity = this.createEntity('Mouse');
    entity.addMouse(x, y);
    return entity;
  };
  /**
   * @param {number} x
   * @param {number} y
   * @returns {entitas.Entity}
   */
  Pool.prototype.replaceMouse = function(x, y) {
    var entity = this.mouseEntity;
    if (entity == null) {
      entity = this.setMouse(x, y);
    } else {
      entity.replaceMouse(x, y);
    }
    return entity;
  };
  /**
   * @returns {entitas.Entity}
   */
  Pool.prototype.removeMouse = function() {
    this.destroyEntity(this.mouseEntity);
  };
  /** @type {entitas.Matcher} */
  Object.defineProperty(Pool.prototype, 'firingEntity', {
    get: function() {
      return this.getGroup(Matcher.Firing).getSingleEntity();
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'isFiring', {
    get: function() {
      return this.firingEntity != null;
    },
    set: function(value) {
      var entity = this.firingEntity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity('Firing').isFiring = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });
});
