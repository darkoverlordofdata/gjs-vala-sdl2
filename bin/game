/**
 *  Copyright 2017 darkoverlordofdata
 *
 * Simple module loader/gjs helper
 * normalized access to amd, commonjs and gjs imports
 *
 */
Object.defineProperties(window, {
    define: { value: (function (modules) {
            return function (name, deps, callback) {
                if (typeof name !== 'string') {
                    var bundle = deps();
                    for (name in bundle)
                        modules[name] = { id: name, exports: bundle[name] };
                }
                else {
                    modules[name] = { id: name, exports: {} };
                    var args = [function (name) { return modules[name] ? modules[name].exports : imports[name]; },
                        modules[name].exports];
                    for (var i = 2; i < deps.length; i++)
                        args.push(modules[deps[i]].exports);
                    callback.apply(modules[name].exports, args);
                }
            };
        }({
            Lang: { id: 'Lang', exports: imports.lang },
            Sdx: { id: 'Sdx', exports: imports.gi.sdx }
        })) },
    console: { value: {
            log: function () { print.apply(null, arguments); },
            warn: function () { print.apply(null, arguments); },
            error: function () { print.apply(null, arguments); },
            info: function () { print.apply(null, arguments); }
        } },
    _: { value: imports.gettext.gettext }
});
Object.defineProperties(define, {
    amd: { value: true },
    version: { value: '0.1.0' },
    path: { value: function (path) { return imports.searchPath.unshift(path); } },
    imports: { value: function (libs) { return define([], function () { return libs; }); } }
});
Object.defineProperties(String.prototype, {
    printf: { value: imports.format.format }
});
/**
 * Global constants
 */
var DATADIR = '/home/bruce/gjs/sdxjs/data';
define("keys", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.KEY_z = 122;
    exports.KEY_ESC = 27;
});
define("entities", ["require", "exports", "Sdx"], function (require, exports, sdx) {
    "use strict";
    var Tau = 6.28318;
    function createBackground() {
        // sprite defaults to layer 0
        return {
            active: true,
            scale: { x: 3, y: 3 },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 0 },
            sprite: sdx.createSprite('images/BackdropBlackLittleSparkBlack.png')
        };
    }
    function createPlayer() {
        var sprite = sdx.createSprite('images/spaceshipspr.png');
        sprite.layer = 8;
        return {
            player: true,
            active: true,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 0 },
            sprite: sprite
        };
    }
    function createBullet() {
        var sprite = sdx.createSprite('images/bullet.png');
        sprite.layer = 9;
        return {
            active: false,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: -800 },
            tint: { r: 0xd2, g: 0xfa, b: 0, a: 0xff },
            sprite: sprite
        };
    }
    function createEnemy1() {
        var sprite = sdx.createSprite('images/enemy1.png');
        sprite.layer = 5;
        return {
            active: false,
            model: 1,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 40 },
            health: { current: 10, maximum: 10 },
            sprite: sprite
        };
    }
    function createEnemy2() {
        var sprite = sdx.createSprite('images/enemy2.png');
        sprite.layer = 6;
        return {
            active: false,
            model: 2,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 30 },
            health: { current: 20, maximum: 20 },
            sprite: sprite
        };
    }
    function createEnemy3() {
        var sprite = sdx.createSprite('images/enemy3.png');
        sprite.layer = 7;
        return {
            active: false,
            model: 3,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 20 },
            health: { current: 60, maximum: 60 },
            sprite: sprite
        };
    }
    function createExplosion() {
        var sprite = sdx.createSprite('images/explosion.png');
        sprite.layer = 10;
        return {
            active: false,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            scale: { x: 0.5, y: 0.5 },
            tween: { min: 0.5 / 100, max: 0.5, speed: -3, repeat: false, active: true },
            tint: { r: 0xd2, g: 0xfa, b: 0xd2, a: 0xfa },
            expires: 0.2,
            sprite: sprite
        };
    }
    function createBang() {
        var sprite = sdx.createSprite('images/explosion.png');
        sprite.layer = 10;
        return {
            active: false,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            scale: { x: 0.2, y: 0.2 },
            tween: { min: 0.2 / 100, max: 0.2, speed: -3, repeat: false, active: true },
            tint: { r: 0xd2, g: 0xfa, b: 0xd2, a: 0xfa },
            expires: 0.2,
            sprite: sprite
        };
    }
    function createParticle() {
        var radians = Math.random() * Tau;
        var magnitude = Math.ceil(Math.random() * 200);
        var velocityX = magnitude * Math.cos(radians);
        var velocityY = magnitude * Math.sin(radians);
        var scale = Math.random() * 10;
        var sprite = sdx.createSprite('images/star.png');
        sprite.layer = 10;
        return {
            active: false,
            bounds: { x: 0, y: 0, w: sprite.width, h: sprite.height },
            position: { x: 0, y: 0 },
            scale: { x: scale, y: scale },
            velocity: { x: velocityX, y: velocityY },
            tint: { r: 0xfa, g: 0xfa, b: 0xd2, a: 0xff },
            expires: 0.5,
            sprite: sprite
        };
    }
    exports.all = new Array(27);
    exports.bullets = new Array(20);
    exports.enemies = new Array(18);
    exports.explosions = new Array(8);
    exports.bang = new Array(8);
    function createAll(game) {
        var z = 0; // entity 
        var b = 0; // bullets
        var e = 0; // enemies
        var x = 0; // explosions
        var g = 0; // bang
        var p = 0; // particle
        exports.all[z++] = createBackground();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.bullets[b++] = createBullet();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy1();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy2();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.enemies[e++] = createEnemy3();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[x++] = createExplosion();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        exports.all[z++] = exports.explosions[g++] = createBang();
        var player = exports.all[z++] = createPlayer();
        game.addSprite(exports.all[0].sprite);
        game.addSprite(player.sprite);
        return player;
    }
    exports.createAll = createAll;
});
define("systems", ["require", "exports", "keys"], function (require, exports, keys) {
    "use strict";
    var fireRate = 0.1;
    var timeToFire = 0;
    var enemyT1 = 2;
    var enemyT2 = 7;
    var enemyT3 = 13;
    function physicsSystem(game, entities) {
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
            var e = entities_1[_i];
            if (e.active) {
                e.position.x += e.velocity.x * game.delta_time;
                e.position.y += e.velocity.y * game.delta_time;
                e.sprite.x = e.position.x;
                e.sprite.y = e.position.y;
                if (e.scale)
                    e.sprite.setScale(e.scale.x, e.scale.y);
                if (e.tint)
                    e.sprite.setColor(e.tint.r, e.tint.g, e.tint.b);
            }
        }
    }
    exports.physicsSystem = physicsSystem;
    function inputSystem(game, player, bullets) {
        player.position.x = game.mouse_x;
        player.position.y = game.mouse_y;
        if (game.mouse_down || game.getKey(keys.KEY_z)) {
            timeToFire -= game.delta_time;
            if (timeToFire < 0) {
                timeToFire = fireRate;
                for (var _i = 0, bullets_1 = bullets; _i < bullets_1.length; _i++) {
                    var e = bullets_1[_i];
                    if (!e.active) {
                        e.active = true;
                        e.position.x = game.mouse_x + 27;
                        e.position.y = game.mouse_y + 2;
                        game.addSprite(e.sprite);
                        break;
                    }
                }
                for (var _a = 0, bullets_2 = bullets; _a < bullets_2.length; _a++) {
                    var e = bullets_2[_a];
                    if (!e.active) {
                        e.active = true;
                        e.position.x = game.mouse_x - 27;
                        e.position.y = game.mouse_y + 2;
                        game.addSprite(e.sprite);
                        break;
                    }
                }
            }
        }
    }
    exports.inputSystem = inputSystem;
    function expireSystem(game, entities) {
        for (var _i = 0, entities_2 = entities; _i < entities_2.length; _i++) {
            var e = entities_2[_i];
            if (e.player)
                continue;
            if (e.active && e.expires != undefined) {
                e.expires -= game.delta_time;
                if (e.expires < 0) {
                    e.active = false;
                    game.removeSprite(e.sprite);
                }
            }
        }
    }
    exports.expireSystem = expireSystem;
    function removalSystem(game, entities) {
        for (var _i = 0, entities_3 = entities; _i < entities_3.length; _i++) {
            var e = entities_3[_i];
            if (e.player)
                continue;
            if (e.active && e.position.y < 0 || e.position.y > game.height) {
                game.removeSprite(e.sprite);
                e.active = false;
            }
        }
    }
    exports.removalSystem = removalSystem;
    function tweenSystem(game, entities) {
        for (var _i = 0, entities_4 = entities; _i < entities_4.length; _i++) {
            var e = entities_4[_i];
            if (e.active && e.tween) {
                var tween = e.tween;
                var x = e.scale.x + (tween.speed * game.delta_time);
                var y = e.scale.y + (tween.speed * game.delta_time);
                var active = e.tween.active;
                if (x > tween.max) {
                    x = tween.max;
                    y = tween.max;
                    active = false;
                }
                else if (x < tween.min) {
                    x = tween.min;
                    y = tween.min;
                    active = false;
                }
                e.scale = { x: x, y: y };
                e.tween.active = active;
            }
        }
    }
    exports.tweenSystem = tweenSystem;
    function spawnSystem(game, enemies) {
        function spawn(t, enemy) {
            var d1 = t - game.delta_time;
            if (d1 < 0) {
                for (var _i = 0, enemies_1 = enemies; _i < enemies_1.length; _i++) {
                    var e = enemies_1[_i];
                    if (!e.active && e.model === enemy) {
                        e.position.x = Math.random() * game.width - e.bounds.w / 2;
                        e.position.y = e.bounds.h;
                        e.health.current = e.health.maximum;
                        e.active = true;
                        game.addSprite(e.sprite);
                        break;
                    }
                }
                switch (enemy) {
                    case 1: return 2;
                    case 2: return 7;
                    case 3: return 13;
                    default: return 0;
                }
            }
            else
                return d1;
        }
        enemyT1 = spawn(enemyT1, 1);
        enemyT2 = spawn(enemyT2, 2);
        enemyT3 = spawn(enemyT3, 3);
    }
    exports.spawnSystem = spawnSystem;
    function collisionSystem(game, enemies, bullets) {
    }
    exports.collisionSystem = collisionSystem;
});
define("game", ["require", "exports", "Sdx", "keys", "entities", "systems"], function (require, exports, sdx, keys, entities, systems) {
    "use strict";
    function main() {
        var game = sdx.createGame("ShmupWarz", 640, 640, DATADIR);
        // const bgd = sdx.createSprite('images/BackdropBlackLittleSparkBlack.png')
        // const player = sdx.createSprite('images/spaceshipspr.png')
        // bgd.setScale(3, 3)
        // game.addSprite(bgd)
        // game.addSprite(player)
        var player = entities.createAll(game);
        game.start();
        while (game.running) {
            game.handleEvents();
            if (game.getKey(keys.KEY_ESC))
                break;
            else {
                systems.physicsSystem(game, entities.all);
                systems.removalSystem(game, entities.all);
                systems.spawnSystem(game, entities.enemies);
                systems.expireSystem(game, entities.all);
                //systems.tweenSystem(game, entities.explosions)
                //systems.tweenSystem(game, entities.bang)
                systems.inputSystem(game, player, entities.bullets);
                game.draw();
            }
        }
    }
    main();
});
